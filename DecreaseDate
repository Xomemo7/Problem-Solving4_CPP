#include <iostream>
using namespace std;
struct stDate
{
    short Day;
    short Month;
    short Year;
};
short ReadYear()
{
    short Year;
    cout << "Enter a year: ";
    cin >> Year;
    return Year;
}
short ReadMonth()
{
    short Month;
    do
    {
        cout << "Enter a month: ";
        cin >> Month;
    } while (Month < 1 || Month>12);
    return Month;
}
short ReadDay()
{
    short Day;
    do
    {
        cout << "Enter a Day: ";
        cin >> Day;
    } while (Day < 1 || Day>31);
    return Day;
}
stDate ReadDate()
{
    stDate Date;
    Date.Day = ReadDay();
    Date.Month = ReadMonth();
    Date.Year = ReadYear();
    return  Date;
}
bool IsLeapYear(short Year)
{
    return (Year % 400 == 0) || ((Year % 4 == 0) && (Year % 100 != 0));
}
short DaysInMonth(short Year, short Month)
{
    switch (Month)
    {
    case 1:case 3: case 5: case 7: case 8: case 10: case 12: return 31; break;
    case 2: return (IsLeapYear(Year)) ? 29 : 28; break;
    default:return 30;
    }
}
stDate DecreaseDateByOneDay(stDate Date)
{
    if (Date.Day==1)
    {
        if (Date.Month==1)
        {
            Date.Day = 31;
            Date.Month = 12;
            Date.Year--;
        }
        else
        {
            Date.Month--;
            Date.Day = DaysInMonth(Date.Year, Date.Month);
        }
    }
    else
        Date.Day--;
    return Date;
}
stDate DecreaseDateByXDays(stDate Date,int NumberOfDaysToSub)
{
    for (int i = 1; i <= NumberOfDaysToSub; i++)
        Date=DecreaseDateByOneDay(Date);
    return Date;
}
stDate DecreaseDateByOneWeek(stDate Date)
{
    for (int i = 1; i <=7; i++)
        Date = DecreaseDateByOneDay(Date);
    return Date;
}
stDate DecreaseDateByXWeeks(stDate Date, int NumberOfWeeksToSub)
{
    for (int i = 1; i <= NumberOfWeeksToSub; i++)
        Date = DecreaseDateByOneWeek(Date);
    return Date;
}
stDate DecreaseDateByOneMonth(stDate Date)
{
    if (Date.Month == 1)
    {
        Date.Month = 12;
        Date.Year--;
    }
    else
        Date.Month--;
    
    short NumberOfDaysInCurrentMonth = DaysInMonth(Date.Year, Date.Month);
    if (Date.Day > NumberOfDaysInCurrentMonth)
    {
        Date.Day = NumberOfDaysInCurrentMonth;
    }
    return Date;
}
stDate DecreaseDateByXMonths(stDate Date, int NumberOfMonthsToSub)
{
    for (int i = 1; i <= NumberOfMonthsToSub; i++)
        Date = DecreaseDateByOneMonth(Date);
    return Date;
}
stDate DecreaseDateByOneYear(stDate Date)
{
    Date.Year--;
    return Date;
}
stDate DecreaseDateByXYears(stDate Date, int NumberOfYearsToSub)
{
    for (int i = 1; i <= NumberOfYearsToSub; i++)
        Date = DecreaseDateByOneYear(Date);
    return Date;
}
stDate DecreaseDateByXYearsFaster(stDate Date, int NumberOfYearsToSub)
{
    Date.Year -= NumberOfYearsToSub;
    return Date;
}
stDate DecreaseDateByOneDecade(stDate Date)
{
    Date.Year -= 10;
    return Date;
}
stDate DecreaseDateByXDecades(stDate Date, int NumberOfDecadesToSub)
{
    for(int i=1;i<= NumberOfDecadesToSub;i++)
        Date = DecreaseDateByOneDecade(Date);
    return Date;
}
stDate DecreaseDateByXDecadesFaster(stDate Date, int NumberOfDecadesToSub)
{
    Date.Year -= 10* NumberOfDecadesToSub;
    return Date;
}
stDate DecreaseDateByOneCentury(stDate Date)
{
    Date.Year-=100;
    return Date;
}
stDate DecreaseDateByOneMillennium(stDate Date)
{
    
    Date.Year -= 1000;
    return Date;
}

void PrintDate(stDate Date,string Text)
{
    cout << Text;
    printf("%d/%d/%d\n", Date.Day, Date.Month, Date.Year);
}
void PrintResult()
{
    //we created date2 so we can save date1 values
    stDate Date1 = ReadDate();
    cout << endl;
    Date1 = DecreaseDateByOneDay(Date1);
    PrintDate(Date1, "01-Subtracting one day is: ");

    Date1 = DecreaseDateByXDays(Date1,10);
    PrintDate(Date1, "02-Subtracting 10 days is: ");

    Date1 = DecreaseDateByOneWeek(Date1);
    PrintDate(Date1, "03-Subtracting one week is: ");

    Date1 = DecreaseDateByXWeeks(Date1,10);
    PrintDate(Date1, "04-Subtracting 10 weeks is: ");

    Date1 = DecreaseDateByOneMonth(Date1);
    PrintDate(Date1, "05-Subtracting one month is: ");

    Date1 = DecreaseDateByXMonths(Date1,5);
    PrintDate(Date1, "06-Subtracting 5 Months is: ");

    Date1 = DecreaseDateByOneYear(Date1);
    PrintDate(Date1, "07-Subtracting one year is: ");

    Date1 = DecreaseDateByXYears(Date1,10);
    PrintDate(Date1, "08-Subtracting 10 years is: ");

    Date1 = DecreaseDateByXYearsFaster(Date1, 10);
    PrintDate(Date1, "09-Subtracting 10 years (Faster) is: ");

    Date1 = DecreaseDateByOneDecade(Date1);
    PrintDate(Date1, "10-Subtracting one Decade is: ");

    Date1 = DecreaseDateByXDecades(Date1,10);
    PrintDate(Date1, "11-Subtracting 10 Decades is: ");

    Date1 = DecreaseDateByXDecadesFaster(Date1, 10);
    PrintDate(Date1, "12-Subtracting 10 Decades (Faster) is: ");

    Date1 = DecreaseDateByOneCentury(Date1);
    PrintDate(Date1, "13-Subtracting one century is: ");

    Date1 = DecreaseDateByOneMillennium(Date1);
    PrintDate(Date1, "14-Subtracting one millennium is: ");
}

int main()
{
    PrintResult();
    return 0;
}