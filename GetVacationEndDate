#include<iostream>
using namespace std;
struct stDate
{
	short Day;
	short Month;
	short Year;
};
short ReadDay()
{
	short Day;
	cout << "\nPlease enter a Day? ";
	cin >> Day; return Day;
}
short ReadMonth()
{
	short Month;
	cout << "\nPlease enter a Month? ";
	cin >> Month; return Month;
}
short ReadYear()
{
	short Year;
	cout << "\nPlease enter a year? ";
	cin >> Year;
	return Year;
}
stDate ReadDate(string Message)
{
	stDate Date;
	cout << Message;
	Date.Day = ReadDay();
	Date.Month = ReadMonth();
	Date.Year = ReadYear();
	return  Date;
}
bool IsLeapYear(int Year)
{
	return (Year % 400 == 0) || ((Year % 4 == 0) && (Year % 100 != 0));
}
short DayOfWeekOrder(short Day, short Month, short Year)
{
	short a, y, m;
	a = (14 - Month) / 12;
	y = Year - a;
	m = Month + (12 * a) - 2;
	// Gregorian://0:sun, 1:Mon, 2:Tue...etc
	return (Day + y + (y / 4) - (y / 100) + (y / 400) + ((31 * m) / 12)) % 7;
}
short DayOfWeekOrder(stDate Date)
{
	short a, y, m;
	a = (14 - Date.Month) / 12;
	y = Date.Year - a;
	m = Date.Month + (12 * a) - 2;
	// Gregorian://0:sun, 1:Mon, 2:Tue...etc
	return (Date.Day + y + (y / 4) - (y / 100) + (y / 400) + ((31 * m) / 12)) % 7;
}
string DayShortName(short DayOfWeekOrder)
{
	string arrDayNames[] = { "Sun","Mon","Tue","Wed","Thu","Fri","Sat" };
	return arrDayNames[DayOfWeekOrder];
}
short DaysInMonth(short Year, short Month)
{
	switch (Month)
	{
	case 1:case 3: case 5: case 7: case 8: case 10: case 12: return 31; break;
	case 2: return (IsLeapYear(Year)) ? 29 : 28; break;
	default:return 30;
	}
}
bool IsWeekend(stDate Date)
{
	return(DayOfWeekOrder(Date) > 4);
}
bool IsBusinessDay(stDate Date)
{
	return(!(IsWeekend(Date)));
}
void PrintDate(stDate Date, string Text)
{
	cout << Text;
	printf("%d/%d/%d\n", Date.Day, Date.Month, Date.Year);
}
bool IsLastDayInMonth(stDate Date)
{
	return (Date.Day == DaysInMonth(Date.Year, Date.Month));
}
bool IsLastMonthInYear(short Month)
{
	return (Month == 12);
}
stDate IncreaseDateByOneDay(stDate Date)
{
	if (IsLastDayInMonth(Date))
	{
		Date.Day = 1;
		if (IsLastMonthInYear(Date.Month))
		{
			Date.Month = 1;
			Date.Year++;
		}
		else
		{
			Date.Month++;
		}
	}
	else
		Date.Day++;
	return Date;
}
bool IsDate1Less(stDate Date1, stDate Date2)
{
	return  (Date1.Year < Date2.Year) ? true : ((Date1.Year == Date2.Year) ?
		(Date1.Month < Date2.Month ? true : (Date1.Month == Date2.Month ?
			Date1.Day < Date2.Day : false)) : false);
}
bool AreDatesEqual(stDate Date1, stDate Date2)
{
	if (Date1.Year == Date2.Year && Date1.Month == Date2.Month && Date1.Day == Date2.Day)
		return true;
	return false;
}
stDate GetVacationEndDate(stDate DateFrom,int VacationDays)
{
	for (int i = 0; i < VacationDays; i++)
	{
		if (IsWeekend(DateFrom))
			i--;
		DateFrom = IncreaseDateByOneDay(DateFrom);
	}
	return DateFrom;
}
int main()
{
	stDate DateFrom, DateTo;
	int VacationDays=0;
	DateFrom = ReadDate("Enter Date From: ");
	cout << "\nEnter vacation days number: ";
	cin >> VacationDays;
	DateTo = GetVacationEndDate(DateFrom, VacationDays);
	PrintDate(DateTo, "Vacation ends on: " + DayShortName(DayOfWeekOrder(DateTo)) + ", ");
	return 0;
}